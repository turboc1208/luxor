import appdaemon.plugins.hass.hassapi as hass
import datetime
import time
import requests
from requests.auth import HTTPDigestAuth
import json
import os

m4_include("/home/appdaemon/code/appdaemon/adlib_imports.pyi")
class luxor(hass.Hass):

  def initialize(self):
    # self.LOGLEVEL="DEBUG"
    self.log("luxor App")
    ADUtils=self.get_app("ADutils")

    url = "http://192.168.2.201/"

    self.listen_event(self.luxor_event_handler,"LUXOR_EVENT")

  def luxor_event_handler(self,event,data,kwargs):
    url="http://192.168.2.201/"
    payload={}
    if not "type" in data:
      self.log("type must be specified in event call : {}".format(data))
    if not "action" in data:
      self.log("action on/off must be specified : {}".format(data))
    self.log("Type and action in event")

    # Handle Group requests
    if data["type"].lower()=="group":
      self.log("processing group message")
      url=url+"IlluminateGroup.json"
      if not "index" in data:
        self.log("GroupNumber must be specified for group actions : {}".format(data))
      else:
        payload["GroupNumber"]=int(data["index"])
        self.log("Group index set payload={}".format(payload))
      if not str(data["action"]).isnumeric()==True:
        self.log("Action for group must be numeric intensity between 0 - off and 100 - full: {}".format(data))
      else:
        payload["Intensity"]=int(str(data["action"]))
        self.log("Set intensity to {}".format(payload["Intensity"]))
    # handle Theme requests
    elif data["type"].lower()=="theme":
      self.log("Processing theme message")
      url=url+"IlluminateTheme.json"
      if not "index" in data:
        self.log("index must be specified for theme actions : {}".format(data))
      else:
        payload["ThemeIndex"]=str(data["index"])
        self.log("ThemeIndex set payload={}".format(payload))
      if data["action"].lower()=="on":
        payload["OnOff"]=1
      else:
        payload["OnOff"]=0
    else:
      self.log("Invalid type provided : {}".format(data))

#    payload = "{\"ThemeIndex\":\"1\",\"OnOff\":0}"
#    headers = {
#        'Content-Type': "application/json",
#        'cache-control': "no-cache",
#        'Postman-Token': "c01a08ea-4614-4449-8b69-dd8116b02e59"
#        }

    headers = {
        'Content-Type': "text/plain;charset=UTF-8",
        'Connection': "keep-alive",
        'Accept-Encoding': "gzip, deflate",
        'Accept-Language': "en-US,en;q=0.9"
        }

    payload_str=json.dumps(payload)
    self.log("url={},payload={},headers={}".format(url,payload_str,headers))
    try:
      response = requests.request("POST", url, data=payload_str, headers=headers)
      self.log("response={}".format(response.text))
    except ConnectionError:
      self.log("Connection error")

m4_include("/home/appdaemon/code/appdaemon/adlib.pyi")
